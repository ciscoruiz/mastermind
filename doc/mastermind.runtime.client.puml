@startuml

package mastermind.controller {
   class ControllersContainer {
      ControllersContainer(ControllerAbstractFactory)
      Controller getController(State state)
   }

   class ControllerAbstractFactory {
      {abstract}StartController createStartController();
      {abstract}PlayController createPlayController();
      {abstract}ResumeController createResumeController();
   }

   class ControllerVisitor {
      {abstract}void visit(StartController startController);
      {abstract}void visit(PlayController playController);
      {abstract}void visit(ResumeController resumeController);
   }

   package rmi {
      class ControllerRmiFactory
   }

   ControllerAbstractFactory <|-- ControllerRmiFactory
}

package mastermind.rmi {
   interface MasterMindOperations <<RMI Client>> {
       {abstract}void setNextState()
       {abstract}boolean stateEnablesContinuePlaying()
       {abstract}State getState()
       {abstract}void reset()
       {abstract}void initializeGame()
       {abstract}Code getSecretCode()
       {abstract}boolean continueGame()
       {abstract}Response evaluate(Code guessCode)
       {abstract}ValidFigures getValidFigures()
       {abstract}int getAttempt()
       {abstract}int getMaxAttempt()
       {abstract}void codeBreakerWins()
       {abstract}void codeMakerWins()
       {abstract}void registry()
       {abstract}void undo()
       {abstract}void redo()
       {abstract}void quit()
       {abstract}boolean codeDiscovered()
       {abstract}boolean isAborted()
       {abstract}boolean canApplyUndo()
       {abstract}boolean canApplyRedo()
       {abstract}void resume()
       {abstract}void stop()
   }
}

class MasterMind {
   {abstract} void play()
}

package mastermind.runtime {
   MasterMindClient *-> MasterMindOperations
}

MasterMind <|-down- MasterMindClient

MasterMindClient *-right-> ControllerVisitor
MasterMindClient *-down-> ControllersContainer
MasterMindClient *-down-> ControllerAbstractFactory

@enduml


