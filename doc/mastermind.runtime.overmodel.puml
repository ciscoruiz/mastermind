@startuml

package mastermind.controller {
   class ControllersContainer {
      ControllersContainer(ControllerAbstractFactory)
      Controller getController(State state)
   }

   class ControllerAbstractFactory {
      {abstract}StartController createStartController();
      {abstract}PlayController createPlayController();
      {abstract}ResumeController createResumeController();
   }

   package model {
      class ControllerModelFactory
   }

   class ControllerVisitor {
      {abstract} void visit(StartController startController);
      {abstract} void visit(PlayController playController);
      {abstract} void visit(ResumeController resumeController);
   }

   ControllerAbstractFactory <|-- ControllerModelFactory
}

package mastermind.rmi {
   interface MasterMindOperations {
       {abstract}void setNextState()
       {abstract}boolean stateEnablesContinuePlaying()
       {abstract}State getState()
       {abstract}void reset()
       {abstract}void initializeGame()
       {abstract}Code getSecretCode()
       {abstract}boolean continueGame()
       {abstract}Response evaluate(Code guessCode)
       {abstract}ValidFigures getValidFigures()
       {abstract}int getAttempt()
       {abstract}int getMaxAttempt()
       {abstract}void codeBreakerWins()
       {abstract}void codeMakerWins()
       {abstract}void registry()
       {abstract}void undo()
       {abstract}void redo()
       {abstract}void quit()
       {abstract}boolean codeDiscovered()
       {abstract}boolean isAborted()
       {abstract}boolean canApplyUndo()
       {abstract}boolean canApplyRedo()
       {abstract}void resume()
       {abstract}void stop()
   }
}

class MasterMind {
   {abstract} void play()
}

package mastermind.runtime {
   class MasterMindOverModel {
      MasterMindOverModel(ViewsContainer viewsContainer)
   }

   class MasterMindServerOperations <<RMI Implementation>>{
      StartController startController
      PlayController playController
      ResumeController resumeController
      __Every method will use some controller__
   }

   MasterMindOverModel <|-- MasterMindStandalone
   MasterMindOverModel <|-- MasterMindServer

   MasterMindServer *--left- MasterMindServerOperations

   MasterMindOperations <|--- MasterMindServerOperations
}

package mastermind.model {
   class Configuration
   class Game
   class State
}

MasterMind <|-- MasterMindOverModel

MasterMindOverModel *-up-> Game
MasterMindOverModel *-up-> State
MasterMindOverModel *-up-> Configuration

MasterMindOverModel *--> ControllerAbstractFactory
MasterMindOverModel *--> ControllerVisitor

MasterMindStandalone *--> ControllersContainer

@enduml


